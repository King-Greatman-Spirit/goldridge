# DJANGO COMMANDS
python -m pip install --upgrade pip #Pip upgrade
# Once upgraded, install virtualenv using pip3:
python -m venv venv # Create virtual environment
source venv/bin/activate  #for mac users
source venv/Scripts/activate  #for windows users

django-admin startproject goldridge
python manage.py startapp accounts
python manage.py startapp blog
python manage.py startapp company
python manage.py startapp enquiry
python manage.py startapp service
python manage.py startapp staff
python manage.py startapp faq


pip uninstall jupyter_client==8.3.1 jupyter_core==5.3.1 jupyter_server==2.7.3 jupyter_server_terminals==0.4.4 jupyterlab==4.0.5 jupyterlab-pygments==0.2.2 jupyterlab-widgets==3.0.8 jupyterlab_server==2.24.0

ls base
pip install -r requirements.txt #Install all pkg in requirements.txt
pip freeze > requirements.txt # move pkg to requirements.txt
pip install # Install all pkgs
python manage.py makemigrations
python manage.py migrate
python manage.py runserver #To run server
python manage.py createsuperuser #To create admin user
python manage.py collectstatic # Collects and prepares static files for production deployment.
python manage.py test # To test project
python manage.py check
python manage.py reset_db  # To erase all data in your database

docker-compose up   # To start the container
#retain the existing containers and only restart the services
docker-compose restart  
docker-compose down  # This will stop and remove the containers.
docker-compose up -d  # This will recreate and start the containers with the updated configuration.
docker compose up --build
docker-compose up --build -d
docker-compose logs db   # To check the logs
docker-compose exec app pip install django
docker-compose exec app pip install --upgrade pip
docker-compose exec app pip install --upgrade -r requirements.txt
docker-compose down --volumes # Pull down volumes
docker-compose exec app python manage.py startapp faq
docker-compose exec app pip install django
docker-compose run --rm app # django docker test
docker-compose run app python manage.py migrate
docker-compose run app  python manage.py collectstatic
docker-compose run app  python manage.py createsuperuser --no-input
python manage.py collectstatic --no-input --ignore admin
docker-compose run app python manage.py makemigrations --fake


In order to prevent this error try to disable docker buildkit before running any docker related command:

#Traditional Docker Builds
export DOCKER_BUILDKIT=0
export COMPOSE_DOCKER_CLI_BUILD=0

#Enable Docker BuildKit
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

Reset Database
docker-compose down
rm -rf ./volumes/db 
docker-compose build
docker-compose up -d

python manage.py shell

from accounts.models import MyAccountManager

obj = MyAccountManager.objects.all().delete()
obj.delete()


# GENERAL COMMANDS
rm -rf goldridge/ #to remove folder
rm -rf goldridge/* #to remove all directories in folder
ls -le #display all folders with access
cd .. #go back to the prev folders
rm -fr goldridge # delete folder with git inside
rm -r goldridge # delete folder 
vim commands.txt
cat commands.txt
Esc :wq! Enter
touch commands.txt
Note that the tilde (~) represents your home directory.
mv <source_file> ~ <destination_folder>  #to move a file to another folder 

create a new repository on the command line
git checkout Dev
echo "# goldridge" >> README.md
git init
git add README.md
git add .
git commit -m "first commit"
git commit -m "12:28AM 11-11-2023 COMMIT"
git branch -M dev
git remote add origin git@github.com:King-Greatman-Spirit/GoldRidgeCoop.git
git push -u origin dev

push an existing repository from the command line
git remote add origin git@github.com:King-Greatman-Spirit/GoldRidgeCoop.git
git branch -M dev
git push -u origin dev

git pull origin dev




